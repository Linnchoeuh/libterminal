/**
 * @file terminal_env.h
 * @author Lenny Vigeon (lenny.vigeon@ecole-89.com)
 * @date 20-02-2022
 */

#ifndef		__TERMINAL_ENV_H__
#define		__TERMINAL_ENV_H__

#include 	<stdlib.h>
#include 	<stdbool.h>

#include	"terminal_baselib.h"
#include 	"terminal_strsplit.h"

/**
 * @brief Get the content of a environment variable.
 *
 * @param var_name The name of the environment variable.
 * @param env Environment variable.
 * @return char* The content of the requested environment
 * variable, if it doesn't exit return NULL.
 */
char		*env_get_var(char		*var_name,
			     char		**env);


/**
 * @brief Set a new value in the requested variable.
 * You have to dynamically allocate the env var,
 * if not it must cause memory issues.
 *
 * @param var_name The name of the environment variable.
 * @param content What you want to put in the variable.
 * @param env Environment variable.
 * @return true on succes,
 * false if the variable doesn't exist or memory allocation failed.
 */
bool		env_set_var(char		*var_name,
			    char		*content,
			    char		**env);


/**
 * @brief Specially created to get the PATH variable content.
 *
 * @param env Environment variable.
 * @return char** on success with all path splitted,
 * NULL if the variable PATH doesn't exist or memory allocation failed.
 */
char		**env_get_path(char		**env);


/**
 * @brief Replace for example a "$PWD" by "/home/"
 * in the variable split_arg (char **).
 *
 * @param split_arg The target of the modification
 * @param env Environment variable to get the content of the alias.
 * @return true on success,
 * false if it fails.
 */
bool		env_replace_var_alias(char	**split_arg,
				      char	**env);


/**
 * @brief Create a dynamically memory allocation of the env
 * variable sub pointer (env[x] is allocated not env).
 *
 * @param env Environment variable.
 * @return true on success,
 * false on memory allocation failure
 */
bool		env_enable_modification(char	**env);


/**
 * @brief To free an environnement variable generated by
 * env_enable_modification() function.
 *
 * @param env Environment variable dynamically memory allocated to free.
 */
void		env_free_var(char		**env);

#endif  /*      __TERMINAL_ENV_H__    */