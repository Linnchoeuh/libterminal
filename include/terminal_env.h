/**
 * @file terminal_env.h
 * @author Lenny Vigeon (lenny.vigeon@ecole-89.com)
 * @date 20-02-2022
 */

#ifndef		__TERMINAL_ENV_H__
#define		__TERMINAL_ENV_H__

#include 	<stdlib.h>
#include 	<stdbool.h>

#include	"terminal_baselib.h"
#include 	"terminal_strsplit.h"

/**
 * @brief To free an environnement variable generated by
 * env_enable_modification() function.
 *
 * @param env The environment variable dynamically memory allocated to free.
 */
#define env_var_free(env) (term_split_free(env))


/**
 * @brief Get the content of a environment variable.
 * The function is case insensitive then if you write in var_name = "pwd",
 * the function will automatically looking for PWD.
 *
 * @param env Environment variable.
 * @param var_name The name of the environment variable.
 *
 * @return char* The content of the requested environment
 * variable, if it doesn't exit return NULL.
 */
char *env_get_var(char **env,
				  char *var_name);

/**
 * @brief Get the position in the (char**) env of the researched var name.
 * The function is case insensitive then if you write in var_name = "pwd",
 * the function will automatically looking for PWD.
 *
 * @param env Environment variable.
 * @param var_name The name of the environment variable.
 *
 * @return size_t On success with the position of the researched var name.
 * -1 if it doesn't exist.
 * -2 if an error happened.
 */
ssize_t env_get_var_pos(char **env,
						char *var_name);

/**
 * @brief Specially created to get the PATH variable content.
 *
 * @param env Environment variable.
 *
 * @return char** on success with all path splitted,
 * NULL if the variable PATH doesn't exist or memory allocation failed.
 */
char **env_get_path(char **env);


/**
 * @brief Replace for example a "$PWD" by "/home/"
 * in the variable split_arg (char**).
 *
 * @param env Environment variable to get the content of the alias.
 * @param split_arg The target of the modification.
 *
 * @return true on success,
 * false if it fails.
 */
bool env_replace_var_alias(char	**env,
						   char	**split_arg);


/**
 * @brief Create a dynamically memory allocation of the (char**) env
 * variable. The call of this function allow you to use :
 * - term_cd() - env_set_var() - env_add_var() - env_delete_var()
 *
 * @param env The adress of (char**) environment variable.
 * env must be statically allocated, if not it will make memory leak.
 *
 * @return true on success,
 * false on failure. (On failure the env var will be not modified).
 */
bool env_enable_modification(char ***env);


/**
 * @brief Set a new value in the requested variable.
 * You must use env_enable_modification()
 * in order to use this function.
 *
 * @param env Environment variable.
 * @param var_name The name of the environment variable.
 * @param content What you want to put in the variable.
 *
 * @return true on succes,
 * false if the variable doesn't exist or memory allocation failed.
 */
bool env_set_var(char **env,
				 char *var_name,
				 char *content);

/**
 * @brief Add a new var in an (char**) env.
 * You must use env_enable_modification()
 * in order to use this function.
 *
 * @param env The pointer of (char**)
 * @param name The name of your new environnement variable. This (char*) will be copied.
 * @param content The content of your new environnement variable. This (char*) will be copied.
 *
 * @return true on success,
 * false on failure (On failure the env var will be not modified).
 */
bool env_add_var(char ***env,
				 char *name,
				 char *content);


/**
 * @brief Remove
 * You must use env_enable_modification()
 * in order to use this function.
 *
 * @param env Environment variable.
 * @param name The name of the environnement variable you want to delete.
 *
 * @return true on success,
 * false on failure (On failure the env var will be not modified).
 */
bool env_delete_var(char ***env,
					char *name);

#endif  /*      __TERMINAL_ENV_H__    */